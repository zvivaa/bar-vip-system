'use client';
'use strict';

var React = require('react');
var filterErrors = require('./filter-errors/filter-errors.cjs');

function useFormErrors(initialErrors) {
  const [errorsState, setErrorsState] = React.useState(filterErrors.filterErrors(initialErrors));
  const setErrors = React.useCallback((errors) => {
    setErrorsState(
      (current) => filterErrors.filterErrors(typeof errors === "function" ? errors(current) : errors)
    );
  }, []);
  const clearErrors = React.useCallback(() => setErrorsState({}), []);
  const clearFieldError = React.useCallback(
    (path) => {
      if (errorsState[path] === void 0) {
        return;
      }
      setErrors((current) => {
        const errors = { ...current };
        delete errors[path];
        return errors;
      });
    },
    [errorsState]
  );
  const setFieldError = React.useCallback(
    (path, error) => {
      if (error == null || error === false) {
        clearFieldError(path);
      } else if (errorsState[path] !== error) {
        setErrors((current) => ({ ...current, [path]: error }));
      }
    },
    [errorsState]
  );
  return {
    errorsState,
    setErrors,
    clearErrors,
    setFieldError,
    clearFieldError
  };
}

exports.useFormErrors = useFormErrors;
//# sourceMappingURL=use-form-errors.cjs.map
