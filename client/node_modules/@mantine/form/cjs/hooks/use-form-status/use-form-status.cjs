'use client';
'use strict';

var React = require('react');
var isEqual = require('fast-deep-equal');
var getStatus = require('../../get-status/get-status.cjs');
var clearListState = require('../../lists/clear-list-state.cjs');
var getPath = require('../../paths/get-path.cjs');
require('klona/full');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var isEqual__default = /*#__PURE__*/_interopDefault(isEqual);

function useFormStatus({
  initialDirty,
  initialTouched,
  mode,
  $values
}) {
  const [touchedState, setTouchedState] = React.useState(initialTouched);
  const [dirtyState, setDirtyState] = React.useState(initialDirty);
  const touchedRef = React.useRef(initialTouched);
  const dirtyRef = React.useRef(initialDirty);
  const setTouched = React.useCallback((values) => {
    const resolvedValues = typeof values === "function" ? values(touchedRef.current) : values;
    touchedRef.current = resolvedValues;
    if (mode === "controlled") {
      setTouchedState(resolvedValues);
    }
  }, []);
  const setDirty = React.useCallback((values) => {
    const resolvedValues = typeof values === "function" ? values(dirtyRef.current) : values;
    dirtyRef.current = resolvedValues;
    if (mode === "controlled") {
      setDirtyState(resolvedValues);
    }
  }, []);
  const resetTouched = React.useCallback(() => setTouched({}), []);
  const resetDirty = (values) => {
    const newSnapshot = values ? { ...values, ...$values.refValues.current } : $values.refValues.current;
    $values.setValuesSnapshot(newSnapshot);
    setDirty({});
  };
  const setFieldTouched = React.useCallback((path, touched) => {
    setTouched((currentTouched) => {
      if (getStatus.getStatus(currentTouched, path) === touched) {
        return currentTouched;
      }
      return { ...currentTouched, [path]: touched };
    });
  }, []);
  const setFieldDirty = React.useCallback((path, dirty) => {
    setDirty((currentDirty) => {
      if (getStatus.getStatus(currentDirty, path) === dirty) {
        return currentDirty;
      }
      return { ...currentDirty, [path]: dirty };
    });
  }, []);
  const isTouched = React.useCallback(
    (path) => getStatus.getStatus(touchedRef.current, path),
    []
  );
  const clearFieldDirty = React.useCallback(
    (path) => setDirty((current) => {
      if (typeof path !== "string") {
        return current;
      }
      const result = clearListState.clearListState(path, current);
      delete result[path];
      if (isEqual__default.default(result, current)) {
        return current;
      }
      return result;
    }),
    []
  );
  const isDirty = React.useCallback((path) => {
    if (path) {
      const overriddenValue = getPath.getPath(path, dirtyRef.current);
      if (typeof overriddenValue === "boolean") {
        return overriddenValue;
      }
      const sliceOfValues = getPath.getPath(path, $values.refValues.current);
      const sliceOfInitialValues = getPath.getPath(path, $values.valuesSnapshot.current);
      return !isEqual__default.default(sliceOfValues, sliceOfInitialValues);
    }
    const isOverridden = Object.keys(dirtyRef.current).length > 0;
    if (isOverridden) {
      return getStatus.getStatus(dirtyRef.current);
    }
    return !isEqual__default.default($values.refValues.current, $values.valuesSnapshot.current);
  }, []);
  const getDirty = React.useCallback(() => dirtyRef.current, []);
  const getTouched = React.useCallback(() => touchedRef.current, []);
  return {
    touchedState,
    dirtyState,
    touchedRef,
    dirtyRef,
    setTouched,
    setDirty,
    resetDirty,
    resetTouched,
    isTouched,
    setFieldTouched,
    setFieldDirty,
    setTouchedState,
    setDirtyState,
    clearFieldDirty,
    isDirty,
    getDirty,
    getTouched
  };
}

exports.useFormStatus = useFormStatus;
//# sourceMappingURL=use-form-status.cjs.map
