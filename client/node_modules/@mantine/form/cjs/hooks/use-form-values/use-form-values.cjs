'use client';
'use strict';

var React = require('react');
var getPath = require('../../paths/get-path.cjs');
var setPath = require('../../paths/set-path.cjs');

function useFormValues({
  initialValues,
  onValuesChange,
  mode
}) {
  const initialized = React.useRef(false);
  const [stateValues, setStateValues] = React.useState(initialValues || {});
  const refValues = React.useRef(stateValues);
  const valuesSnapshot = React.useRef(stateValues);
  const setValues = React.useCallback(
    ({
      values,
      subscribers,
      updateState = true,
      mergeWithPreviousValues = true
    }) => {
      const previousValues = refValues.current;
      const resolvedValues = values instanceof Function ? values(refValues.current) : values;
      const updatedValues = mergeWithPreviousValues ? { ...previousValues, ...resolvedValues } : resolvedValues;
      refValues.current = updatedValues;
      updateState && setStateValues(updatedValues);
      onValuesChange?.(updatedValues, previousValues);
      subscribers?.filter(Boolean).forEach((subscriber) => subscriber({ updatedValues, previousValues }));
    },
    [onValuesChange]
  );
  const setFieldValue = React.useCallback((payload) => {
    const currentValue = getPath.getPath(payload.path, refValues.current);
    const updatedValue = payload.value instanceof Function ? payload.value(currentValue) : payload.value;
    if (currentValue !== updatedValue) {
      const previousValues = refValues.current;
      const updatedValues = setPath.setPath(payload.path, updatedValue, refValues.current);
      setValues({ values: updatedValues, updateState: payload.updateState });
      payload.subscribers?.filter(Boolean).forEach(
        (subscriber) => subscriber({ path: payload.path, updatedValues, previousValues })
      );
    }
  }, []);
  const setValuesSnapshot = React.useCallback((payload) => {
    valuesSnapshot.current = payload;
  }, []);
  const initialize = React.useCallback((values, onInitialize) => {
    if (!initialized.current) {
      initialized.current = true;
      setValues({ values, updateState: mode === "controlled" });
      setValuesSnapshot(values);
      onInitialize();
    }
  }, []);
  const resetValues = React.useCallback(() => {
    setValues({
      values: valuesSnapshot.current,
      updateState: true,
      mergeWithPreviousValues: false
    });
  }, []);
  const getValues = React.useCallback(() => refValues.current, []);
  return {
    initialized,
    stateValues,
    refValues,
    valuesSnapshot,
    setValues,
    setFieldValue,
    resetValues,
    setValuesSnapshot,
    initialize,
    getValues
  };
}

exports.useFormValues = useFormValues;
//# sourceMappingURL=use-form-values.cjs.map
