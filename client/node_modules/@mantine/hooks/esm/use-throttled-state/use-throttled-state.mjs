'use client';
import { useState, useRef, useCallback, useEffect } from 'react';

function useThrottledState(defaultValue, wait) {
  const [value, setValue] = useState(defaultValue);
  const timeoutRef = useRef(null);
  const active = useRef(true);
  const clearTimeout = () => window.clearTimeout(timeoutRef.current);
  const throttledSetValue = useCallback(
    (newValue) => {
      if (active.current) {
        setValue(newValue);
        clearTimeout();
        active.current = false;
        timeoutRef.current = window.setTimeout(() => {
          active.current = true;
        }, wait);
      }
    },
    [wait]
  );
  useEffect(() => clearTimeout, []);
  return [value, throttledSetValue];
}

export { useThrottledState };
//# sourceMappingURL=use-throttled-state.mjs.map
